import { fireEvent, screen } from '@testing-library/react';
import React from 'react';
import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';
import i18n from '../../../i18n/config';
import { render } from '../../../test-utils';
import CityPicker from './city-picker';

vi.mock('@railmapgen/rmg-palette-resources', () => ({
    __esModule: true,
    cityList: [
        {
            id: 'edinburgh',
            country: 'GBSCT',
            name: {
                en: 'Edinburgh',
                'zh-Hans': 'Áà±‰∏ÅÂ†°',
                'zh-Hant': 'ÊÑõ‰∏ÅÂ†°',
            },
        },
        {
            id: 'hongkong',
            country: 'HK',
            name: {
                en: 'Hong Kong',
                zh: 'È¶ôÊ∏Ø',
            },
        },
        {
            id: 'taipei',
            country: 'TW',
            name: {
                en: 'Taipei',
                zh: 'Âè∞Âåó',
            },
        },
    ],

    countryList: [
        {
            id: 'GBSCT',
            name: {
                en: 'Scotland',
            },
            flagEmoji: 'üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø',
            flagSvg: '1F3F4-E0067-E0062-E0073-E0063-E0074-E007F.svg',
        },
        {
            id: 'HK',
            name: {
                en: 'Hong Kong',
                zh: 'È¶ôÊ∏Ø',
            },
            flagEmoji: 'üá≠üá∞',
            flagSvg: '1F1ED-1F1F0.svg',
        },
        {
            id: 'TW',
            name: {
                en: 'Taiwan',
            },
            flagEmoji: 'üáπüáº',
            flagSvg: '1F1F9-1F1FC.svg',
        },
    ],

    CityCode: {
        Other: 'other',
    },

    MonoColour: {
        black: '#000',
        white: '#fff',
    },
}));

const mockCallbacks = {
    onChange: vi.fn(),
};

describe('Unit tests for CityPicker component', () => {
    beforeEach(() => {
        i18n.changeLanguage('zh-Hans');
    });

    afterEach(() => {
        vi.clearAllMocks();
        vi.resetAllMocks();
    });

    it('Can render flag emojis (for non-Windows users) and translations as expected', async () => {
        render(<CityPicker />);

        fireEvent.focus(screen.getByRole('combobox'));
        await screen.findByRole('dialog');

        const menuItems = screen.getAllByRole('menuitem');
        expect(menuItems).toHaveLength(3);

        expect(menuItems[0]).toHaveTextContent('üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø'); // GBSCT
        expect(menuItems[1]).toHaveTextContent('üè¥'); // TW to be censored
        expect(menuItems[2]).toHaveTextContent('üá≠üá∞'); // HK

        // sorted by Pinyin (under zh-Hans locale)
        expect(menuItems[0]).toHaveTextContent('Áà±‰∏ÅÂ†°'); // read zh-Hans field
        expect(menuItems[1]).toHaveTextContent('Âè∞Âåó'); // read zh field
        expect(menuItems[2]).toHaveTextContent('È¶ôÊ∏Ø'); // read zh field
    });

    it('Can render OpenMoji SVG-format emoji for Windows users as expected', async () => {
        const platformGetter = vi.spyOn(window.navigator, 'platform', 'get');
        platformGetter.mockReturnValue('Win64');

        render(<CityPicker />);

        fireEvent.focus(screen.getByRole('combobox'));
        await screen.findByRole('dialog');

        // flag svg to be displayed for 2 of the cities
        await screen.findByAltText('Flag of GBSCT');
        await screen.findByAltText('Flag of HK');

        // TW to be censored
        expect(screen.getAllByRole('menuitem')[1]).toHaveTextContent('üè¥');
    });

    it('Can mount component with default city code as expected', () => {
        render(<CityPicker defaultValueId={'hongkong' as any} />);

        expect(screen.getByDisplayValue('È¶ôÊ∏Ø')).toBeInTheDocument();
    });

    it('Can handle city selection as expected', async () => {
        render(<CityPicker {...mockCallbacks} />);

        fireEvent.focus(screen.getByRole('combobox'));
        await screen.findByRole('dialog');

        fireEvent.click(screen.getByRole('menuitem', { name: 'üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø Áà±‰∏ÅÂ†°' }));

        expect(mockCallbacks.onChange).toBeCalledTimes(1);
        expect(mockCallbacks.onChange).toBeCalledWith('edinburgh');

        expect(screen.getByDisplayValue('Áà±‰∏ÅÂ†°')).toBeInTheDocument();
    });

    // TODO: isSettled
});
