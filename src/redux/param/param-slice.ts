import { createAction, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { SerializedGraph } from 'graphology-types';
import { NodeAttributes, EdgeAttributes, GraphAttributes } from '../../constants/constants';

/**
 * ParamState contains all the data that a save has, except for the `version` key.
 * Should be persisted and updated as soon as possible when there is a change in the project.
 */
export interface ParamState {
    // TODO: Use SerializedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>
    /**
     * Graph generated by `JSON.stringify(graph.export())`.
     */
    graph: string;
    /**
     * Controls the zoom of the svg.
     * NOTE IT IS SUPER IMPORTANT TO TAKE THIS FACTOR INTO CONSIDERATION
     * IF YOU WANT TO USE THE CORRECT MOUSE POSITION!
     */
    svgViewBoxZoom: number;
    /**
     * The left and top most coordinate.
     */
    svgViewBoxMin: { x: number; y: number };
}

const initialState: ParamState = {
    graph: '{}',
    svgViewBoxZoom: 100,
    svgViewBoxMin: { x: 0, y: 0 },
};

export const setFullState = createAction<ParamState>('runtime/setFullState');
export const saveGraph =
    createAction<SerializedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>>('runtime/saveGraph');

const paramSlice = createSlice({
    name: 'param',
    initialState,
    reducers: {
        // setFullStateAction: (state, action: PayloadAction<ParamState>) => {
        //     // https://stackoverflow.com/questions/60002846/how-can-you-replace-entire-state-in-redux-toolkit-reducer
        //     return { ...action.payload };
        // },
        // saveGraph: (
        //     state,
        //     action: PayloadAction<SerializedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>>
        // ) => {
        //     state.graph = JSON.stringify(action.payload);
        // },
        setSvgViewBoxZoom: (state, action: PayloadAction<number>) => {
            state.svgViewBoxZoom = action.payload;
        },
        setSvgViewBoxMin: (state, action: PayloadAction<{ x: number; y: number }>) => {
            state.svgViewBoxMin = action.payload;
        },
        saveGraphNoEffects: (
            state,
            action: PayloadAction<SerializedGraph<NodeAttributes, EdgeAttributes, GraphAttributes>>
        ) => {
            state.graph = JSON.stringify(action.payload);
        },
    },
    extraReducers: builder => {
        builder
            .addCase(setFullState, (state, action) => {
                return { ...action.payload };
            })
            .addCase(saveGraph, (state, action) => {
                state.graph = JSON.stringify(action.payload);
            });
    },
});

export const { saveGraphNoEffects, setSvgViewBoxZoom, setSvgViewBoxMin } = paramSlice.actions;
export default paramSlice.reducer;
